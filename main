#include <SFML/System.hpp>
#include <SFML/Graphics.hpp>
#include <iostream>
#include <math.h> 
#include <time.h>
#define PI 3.14159265

using namespace std;
using namespace sf;

int main(int argc, char *argv[])
{
	
	const int xScreen = 1200;
	const int yScreen = 2600;
	
	sf::RenderWindow window(sf::VideoMode(xScreen, yScreen), "Touch Joystick");
	
//Joystick Circle
CircleShape circle;
circle.setRadius(120);
circle.setFillColor(Color(210, 210, 240));
circle.setOrigin(circle.getRadius(), circle.getRadius());
circle.setPosition(Vector2f (325, 350));

//Joystick Radius Circle
CircleShape backCircle;
backCircle.setRadius(180);
backCircle.setFillColor(Color( 180, 180, 180));backCircle.setOrigin(backCircle.getRadius(), backCircle.getRadius());
backCircle.setPosition(Vector2f (325, 350));

//This is the Object you can controll
RectangleShape player;
player.setSize(Vector2f(90, 90));
player.setFillColor(Color(160, 190, 190));
player.setPosition(Vector2f(xScreen/2, yScreen/2));
IntRect plrRect = player.getTextureRect();
player.setOrigin(plrRect.width/2, plrRect.height/2);

		
sf::Vector2f positionCircle;
sf::Vector2f positionbackCircle;
float speed;
float radiusCircle;
float radiusbackCircle;


float x, y, distance, radii, angle;


	while (window.isOpen())
	
		{
		sf::Event event;
		while (window.pollEvent(event));
		
positionCircle= circle.getPosition();
positionbackCircle = backCircle.getPosition();
radiusCircle = circle.getRadius();
radiusbackCircle = backCircle.getRadius();
            
FloatRect cRect = circle.getGlobalBounds();
//FloatRect bcRect = backCircle.getGlobalBounds();
            
Vector2i currPos =  Touch::getPosition(0, window);
Vector2f worldPos = window.mapPixelToCoords(currPos);
	
if(cRect.contains(worldPos)){
	
circle.setPosition(circle.getPosition().x, worldPos.x);
		
circle.setPosition(circle.getPosition().y, worldPos.y);

player.move(x * 0.2, y * 0.2);

}
   
x = positionCircle.x  - positionbackCircle.x;
y = positionCircle.y  - positionbackCircle.y;
      
      
distance = sqrt((x * x) + (y * y));
radii = radiusCircle + radiusbackCircle;

 if( distance <= radii){
             
 
 circle.setPosition(circle.getPosition().x  - x /   180 * 120  , circle.getPosition().y - y /  180 *  120);
 
          
      }
      						
		window.clear(sf::Color(120, 100, 145));
		window.draw(backCircle);
		window.draw(circle);
		window.draw(player);
		
		window.display();

	}
	
}
